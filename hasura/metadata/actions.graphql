type Mutation {
  UpdateUserAsUser(user: UpdateUserInput!): UpdateUserOutput
}

type Query {
  file_get(path: String!): FileGetOutput
}

type Query {
  file_get_batch(paths: String!): FileGetBatchOutput
}

type Query {
  getCronEvents(scheduleId: Int!): CronTriggerOutput
}

type Query {
  getOneOffEvents: OneOffScheduleOutput
}

type Query {
  getUploadUrl(filePath: String!): GetUploadUrlOutput
}

type Query {
  postGetNextScheduledEvents(
    apiFutureSchedulesInput: ApiFutureSchedulesInput
  ): ApiFutureSchedules2
}

input UpdateDoctorInput {
  degree: String!
  medicalField: String!
  university: String!
}

input UpdatePatientInput {
  ageGroup: Int!
  cancerStageId: Int!
  cancerTypeId: Int!
}

input UpdateUserInput {
  firstName: String!
  lastName: String!
  gender: String!
  interests: [Int!]
  doctor: UpdateDoctorInput
  patient: UpdatePatientInput
}

input CronTriggerInput {
  name: String!
  cron: String!
}

input ApiFutureSchedulesInput {
  nextCount: Float
  schedules: [SchedulesListItemInput]
}

input SchedulesListItemInput {
  cronExpression: String
  scheduleId: Float
  startTime: String
}

type FileGetOutput {
  url: String!
}

type SignedUrl {
  signed_url: String!
  path: String!
}

type FileGetBatchOutput {
  urls: [SignedUrl]
}

type UpdateUserOutput {
  userId: String!
}

type CronTriggerOutput {
  events: [TriggerEvent!]!
}

type TriggerEvent {
  scheduled_time: String!
}

type GetUploadUrlOutput {
  path: String!
  signedUrl: String!
}

type OneOffScheduleOutput {
  events: [OneOffEvent!]!
}

type OneOffEvent {
  scheduled_time: String!
  payload: String!
}

type ApiFutureSchedules2 {
  result: [JSON]!
}

scalar JSON
